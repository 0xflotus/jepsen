There are several changes I made in order to make the nuodb testing error-free and
more comparable to what was done for postgres (at least in terms of the data model).

-Connection Pooling: I've enabled connection pooling for korma. The old code would spin up
many tens of thousands of connections when client requests would be retried. There's a
mismatch here between how korma manages a 'database' (e.g. it assumes that it lives on a
single host) and how nuodb brokers broker client connections. It turns out that just
capping the connection pool at 200 per named host prevented korma from creating 15000+ 
connections.

-Using a table as a set rather than a JSON clob: I created an option -X insert that will
make jepsen use the same data model as postgres, rather than the clob-as-set model that
it was using before. This was done to make the nuodb and postgres tests more comparable,
and it also allows for easier interrogation of the dataset via the nuosql command line
tool (string manipulation in SQL can be very tedious, SELECT is more convenient).

-Abstracting node names: n1, n2, n3, n4, n5 are now symbolic names that are bound to actual
machine/vm names only in control/net.clj. I did most of my testing on actual hardware, whose
names I couldn't change, so I figured I'd just parameterize everything by hostname.
Unfortunately, I haven't found the time to either have them live in a configuration file or
drill them through as command-line arguments (e.g. -n1 host1.foo.bar). There is now a map
jepsen.control.net/Hosts-map, that will contain the mapping from symbolic name (e.g. :n1)
to the actual node name. Note that I have not modified the test harnesses for systems other
than nuodb and postgres, so it is likely that these changes will have to be made to support
the other systems.

-sudo username/password support: due to differences in the setup I was using, I found it
convenient to drill username/password stuff through as command-line arguments. Now people
don't have to edit the source to switch user identities for jepsening (useful when running
on shared resources).

-alternate port support, command-line flag to use a non-standard port.

-added retry on disconnect for insert. NuoDB connections are more like a traditional DB 
connection, than like a more RESTful fire-and-forget connection. Therefore, NuoDB recommends 
that clients automatically reconnect through a broker if their connection was unexpectedly 
severed.  When failure detection kicks in, it may chose to shutdown the minority partition(s), 
which will close the client connections, so clients should reconnect in that case.


The test setup I used was probably different from what was done for the blog post. It
isn't 100% clear, but it appears that the blog test setup was 1 TE and 1 SM for each node.
The setup I used was to have a broker on n1-n5 and a TE on n2, n4, n5 and an SM on
n1 and n3. This is a simplification and let us more easily experiment with things like
variable commit protocols. The other difference is in how one uses the commit protocol.
I interpreted the jepsen test as testing the ability of a system to accept writes that
should never be lost while that system is undergoing partition. NuoDB allows for a
configurable commit protocol. By default, the protocol being used is what we call
'local', meaning that a commit is confirmed when the TE has successfully processed
everything it needs and sent the commit message off to all the peers (including all
SMs). In a system with 2 SMs, the most reliable commit protocol would be remote:2
meaning that a TE won't respond with success to a commit request until confirmation
has been received from at least 2 SMs that the changes were made durable. There is
a subtlety here that NuoDB can express. remote:2 means that these updates must be
made durable everywhere before commit can complete. Region commits are a way of
assigning priority to some SMs over others. Therefore jepsen can be run with
the SM in the majority partition as the region commit SM.

These changes were tested primarily with NuoDB. I definitely did not test with
redis, riak, or the rest so I can't state that the node name changes will work in those
cases. However, I hope that the map will be easy enough to migrate towards.
